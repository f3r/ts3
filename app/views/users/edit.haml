.edit_profile_page
  = render 'users/user_left_column', :user => current_user
  .span6
    = form_for :user, :url => user_path(@user['id']), :method => :put, :html => {:id => "update_user", :class => 'form-horizontal'} do |f|
      .section-header #{t(:section_header_user_information)}
      - unless coded_errors_for(@user).blank?
        %div{:class => 'alert-message error'}
          = coded_errors_for @user
      .control-group
        = f.label :first_name, "#{t(:first_name)}*", :class => 'control-label'
        .controls
          %i.public
          = f.text_field :first_name, :class => "validate[required]"
      .control-group
        = f.label :last_name, "#{t(:last_name)}*", :class => 'control-label'
        .controls
          %i.private
          = f.text_field :last_name, :class => "validate[required]"
      /TODO: Email has a special validation process, please check with Fer
      .control-group
        = f.label :email, "#{t(:email)}*", :class => 'control-label'
        .controls
          .private
          = f.text_field :email, :class => "validate[required]"
      - if !@user['unconfirmed_email'].blank?
        .input.unconfirmed_email
          = f.label :unconfirmed_email, "#{t(:unconfirmed_email)}*"
          %span
            = @user['unconfirmed_email']
          = link_to "x", cancel_email_change_path, :method => :get, :remote => true, :class => 'tooltip', :title => t(:cancel_email_change)
      .control-group
        = f.label :gender, t(:gender), :class => 'control-label'
        .controls
          .private
          = f.select :gender, [[t(:gender_undisclosed), 'unknown'],[t(:gender_male), 'male'], [t(:gender_female), 'female']]
      .control-group
        = f.label :phone_mobile, t(:mobile_phone), :class => 'control-label'
        .controls
          .private
          = f.text_field :phone_mobile
      .control-group
        = label_tag '', "#{t(:birthdate)}*", :class => 'control-label'
        .controls
          .private
          = select_date (!@user['birthdate'].blank? ? @user['birthdate'].to_date : nil), :prefix => "birthdate", :order => [:day, :month, :year], :start_year => 1930, :end_year => Date.today.year - 18, :include_blank => true, :size => 5
      .clearfix
      .span4.float-right
        = submit_tag t(:save), :class => 'btn btn-primary'
        = link_to t(:cancel), profile_path, :class => 'btn btn-secondary'
      .clearfix

    = form_for :address, :url => user_change_address_path((@user['id'] ? @user['id'] : params[:id])), :method => :put, :html => {:id => "change_address", :class => 'form-horizontal'} do |f|
      /Billing Address Section
      .section-header #{t(:section_header_billing_address)}
      .text
      -# FIXME: coded_errors_for is not working
      -# = coded_errors_for @address
      .control-group
        = f.label :street, "#{t(:street)}*", :class => 'control-label'
        .controls
          .private
          = f.text_field :street, :class => "validate[required]"
      .control-group
        = f.label :city, "#{t(:city)}*", :class => 'control-label'
        .controls
          .public
          = f.text_field :city, :class => "validate[required]"
      .control-group
        = f.label :country, "#{t(:country)}*", :class => 'control-label'
        .controls
          .public
          = f.localized_country_select(:country, [], {:include_blank => t(:choose_country)}, {:class => "validate[required]"})
      .control-group
        = f.label :zip, "#{t(:zip)}*", :class => 'control-label'
        .controls
          .private
          = f.text_field :zip, :class => "validate[required]"
          = f.hidden_field :id
      .clearfix
      .span4.float-right
        = submit_tag t(:save), :class => 'btn btn-primary'
        = link_to t(:cancel), profile_path, :class => 'btn btn-secondary'
      .clearfix

    - if @user['role'] == "agent"

      /Bank Account Section
      .section-header #{t(:section_header_bank_account)}
      .text
      = form_for :bank_account, :url => user_change_bank_account_path((@user['id'] ? @user['id'] : params[:id])), :method => :put, :html => {:id => "change_bank_account", :class => 'form-horizontal'} do |f|
        -# FIXME: coded_errors_for is not working
        -# = coded_errors_for @bank_account
        .control-group
          = f.label :holder_name, "#{t(:holder_name)}*", :class => 'control-label'
          .controls
            .fully-private
            = f.text_field :holder_name, :class => "validate[required]"
        .control-group
          = f.label :holder_street, "#{t(:street)}*", :class => 'control-label'
          .controls
            .fully-private
            = f.text_field :holder_street, :class => "validate[required]"
        .control-group
          = f.label :holder_country_code, "#{t(:country)}*", :class => 'control-label'
          .controls
            .fully-private
            = f.localized_country_select(:holder_country_code, [], {:include_blank => t(:choose_country)}, {:class => "validate[required]"})
          = f.hidden_field :holder_country_name
        .control-group
          = f.label :holder_city_name, "#{t(:city)}*", :class => 'control-label'
          .controls
            .fully-private
            = f.text_field :holder_city_name, :class => "validate[required]"
        .control-group
          = f.label :holder_state_name, "#{t(:state)}", :class => 'control-label'
          .controls
            .fully-private
            = f.text_field :holder_state_name
        .control-group
          = f.label :holder_zip, "#{t(:zip)}*", :class => 'control-label'
          .controls
            .fully-private
            = f.text_field :holder_zip, :class => "validate[required]"
            = f.hidden_field :id
        .local_bank  
          .control-group
            = f.label :account_number, "#{t(:account_number)}*", :class => 'control-label'
            .controls
              .fully-private
              = f.text_field :account_number, :class => "validate[required]"
          .control-group
            = f.label :bank_code, "#{t(:bank_code)}*", :class => 'control-label'
            .controls
              .fully-private
              = f.text_field :bank_code, :class => "validate[required]"
          .control-group
            = f.label :branch_code, "#{t(:branch_code)}*", :class => 'control-label'
            .controls
              .fully-private
              = f.text_field :branch_code, :class => "validate[required]"
        .international_bank
          .control-group
            = f.label :iban, "#{t(:iban)}*", :class => 'control-label'
            .controls
              .fully-private
              = f.text_field :iban, :class => "validate[required]"
          .control-group
            = f.label :swift, "#{t(:swift)}*", :class => 'control-label'
            .controls
              .fully-private
              = f.text_field :swift, :class => "validate[required]"

        .clearfix
        .span4.float-right
          = submit_tag t(:save), :class => 'btn btn-primary'
          = link_to t(:cancel), profile_path, :class => 'btn btn-secondary'
        .clearfix


    = form_for :new_password, :url => user_change_password_path((@user['id'] ? @user['id'] : params[:id])), :method => :put, :html => {:id => "new_password", :class => 'form-horizontal'} do |f|

      /Password Section
      .section-header #{t(:section_header_user_password)}
      -# .input
      -#   = f.label t(:profile_current_pwd)
      -#   .private
      -#   = f.password_field 'current_password', {:placeholder => t(:profile_current_pwd), :class => "validate[required]"}
      .control-group
        = label_tag '', t(:password), :class => 'control-label'
        .controls
          .private
          = f.password_field :password, :class => "validate[required,minSize[6]]"
      .control-group
        = label_tag '', t(:profile_retype_pwd), :class => 'control-label'
        .controls
          .private
          = f.password_field :password_confirmation, :class => "validate[required,equals[new_password_password]]"
      .clearfix
      .span4.float-right
        = f.submit t(:save), :class => 'btn btn-primary'
        = link_to t(:cancel), profile_path, :class => 'btn btn-secondary'
      .clearfix

    .form-horizontal
      -#Accounts Section
      .section-header=t(:linked_accounts)
      = render :partial => "users/user_accounts"
      .clearfix

    #avatar-modal.modal.hide.fade
      = form_for :user, :url => user_path(@user['id']), :method => :put do |f|
        .modal-header
          = link_to "x", '#', :class => "close", 'data-dismiss' => "modal"
          %h3=t(:change_photo)
        .modal-body
          .row
            .span2
              = image_tag(@avatar, :class => "avatar_placeholder", :width => 100)
              .preview
                =t(:preview)
            .span7
              %p=t(:change_photo_description)
              %p
                %a.btn.medium.facebook_avatar=t(:use_facebook_photo)
                - @user_auth['authentications'].each{|x| @facebook_uid = x['uid'] if x['provider'] == "facebook" }
                = f.hidden_field(:facebook_image, :value => "http://graph.facebook.com/#{@facebook_uid}/picture?type=large") if !@facebook_uid.blank?
                = f.hidden_field :avatar_url
              %span
                %a.btn.medium.upload_avatar=t(:upload_a_new_photo)
                %span.upload_field
                  = f.file_field :avatar, :onchange => "readURL(this);", :style=>"display:none;"
        .modal-footer
          = button_tag t(:save), :class => 'btn primary',  "data-loading-text" => "#{t(:saving_photo)}...", :id => "save-btn"

<!--[if IE]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

:javascript
  $(document).ready(function() {
    $('div.private').tooltip({html:true,placement:"above", title: function(){return "#{t(:private_field)}"} });
    $('div.fully-private').tooltip({html:true,placement:"above", title: function(){return "#{t(:fully_private_field)}"} });
    $('div.public').tooltip({html:true,placement:"above", title: function(){return "#{t(:public_field)}"} });
    $("#new_password, #change_address, #update_user, #change_bank_account").validationEngine();
  });

  $(document).ready(function() {
    $(".local_bank").hide();
    $(".international_bank").hide();
    
    $('#bank_account_holder_country_code').change(function() {
      $("input#bank_account_holder_country_name").val($(this).find("option:selected").text());
      if (this.value == "SG") {
        $(".local_bank").show();
        $(".international_bank").hide();
        $(".international_bank input").val("");
      } else {
        $(".international_bank").show();
        $(".local_bank").hide();
        $(".local_bank input").val("");
      }
    });

    $('a.facebook_avatar').click(function() {
      facebook_image = $('input#user_facebook_image').val();
      $('input#user_avatar_url').val(facebook_image);
      $('.avatar_placeholder').attr('src', facebook_image).width(100);
      $('input#user_avatar').hide();
    });
    $('a.upload_avatar').click(function() {
      $('input#user_avatar').show();
      $('input#user_avatar_url').val("");
    });

    // var btn = $('#save-btn').click(function () {
    //   btn.button('loading');
    // })

  });

  function readURL(input) {
         if (input.files && input.files[0]) {
             var reader = new FileReader();
             reader.onload = function (e) {
                 $('.avatar_placeholder')
                     .attr('src', e.target.result)
                     .width(100)
             };
             reader.readAsDataURL(input.files[0]);
         }
  }
//TODO what is this for? it causing error in validation of HTML5
:css
  article, aside, figure, footer, header, hgroup, 
  menu, nav, section { display: block; }
