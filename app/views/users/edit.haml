= render :partial => 'users/user_left_column'
.edit_profile_page
  %section.span8
    .section-header #{t(:section_header_user_information)}
    - unless coded_errors_for(@user).blank?
      %div{:class => 'alert-message error'}
        = coded_errors_for @user

    = form_for :user, :url => user_path(@user['id']), :method => :put, :html => {:id => "update_user"} do |f|
      .input
        = f.label :first_name, "#{t(:first_name)}*"
        .public
        = f.text_field :first_name, :class => "validate[required]"
      .input
        = f.label :last_name, "#{t(:last_name)}*"
        .private
        = f.text_field :last_name, :class => "validate[required]"
      /TODO: Email has a special validation process, please check with Fer
      .input
        = f.label :email, "#{t(:email)}*"
        .private
        = f.text_field :email, :class => "validate[required]"
      .input
        = f.label :gender, t(:gender)
        .private
        = f.select :gender, [[t(:gender_undisclosed), 'unknown'],[t(:gender_male), 'male'], [t(:gender_female), 'female']]
      .input
        = f.label :phone_mobile, t(:mobile_phone)
        .private
        = f.text_field :phone_mobile
      .input
        = f.label :birthdate, "#{t(:birthdate)}*"
        .private
        = select_date (!@user['birthdate'].blank? ? @user['birthdate'].to_date : nil), :prefix => "birthdate", :order => [:day, :month, :year], :start_year => 1930, :end_year => Date.today.year - 18, :include_blank => true, :size => 5
      .clearfix
      .span4.float-right
        = submit_tag t(:save), :class => 'btn primary'
        = link_to (button_tag t(:cancel), :class => 'btn secondary'), profile_path
      .clearfix

      /Billing Address Section
      .section-header #{t(:section_header_billing_address)}
      .text
    = form_for :address, :url => user_change_address_path((@user['id'] ? @user['id'] : params[:id])), :method => :put, :html => {:id => "change_address"} do |f|
      -# FIXME: coded_errors_for is not working
      -# = coded_errors_for @address
      .input
        = f.label :street, "#{t(:street)}*"
        .private
        = f.text_field :street, :class => "validate[required]"
      .input
        = f.label :city, "#{t(:city)}*"
        .public
        = f.text_field :city, :class => "validate[required]"
      .input
        = f.label :country, "#{t(:country)}*"
        .public
        = f.country_select(:country, ["Singapore", "Hong Kong", "Kuala Lumpur"], {:include_blank => true}, { :class => "validate[required]" } )
      .input
        = f.label :zip, "#{t(:zip)}*"
        .private
        = f.text_field :zip, :class => "validate[required]"
        = f.hidden_field :id
      .clearfix
      .span4.float-right
        = submit_tag t(:save), :class => 'btn primary'
        = link_to (button_tag t(:cancel), :class => 'btn secondary'), profile_path
      .clearfix

    = form_for :new_password, :url => user_change_password_path((@user['id'] ? @user['id'] : params[:id])), :method => :put, :html => {:id => "new_password"} do |f|

      /Password Section
      .section-header #{t(:section_header_user_password)}
      -# .input
      -#   = f.label t(:profile_current_pwd)
      -#   .private
      -#   = f.password_field 'current_password', {:placeholder => t(:profile_current_pwd), :class => "validate[required]"}
      .input
        = f.label t(:password)
        .private
        = f.password_field :password, :class => "validate[required,minSize[6]]"
      .input
        = f.label t(:profile_retype_pwd)
        .private
        = f.password_field :password_confirmation, :class => "validate[required,equals[new_password_password]]"
      .clearfix
      .span4.float-right
        = f.submit t(:save), :class => 'btn primary'
        = link_to (button_tag t(:cancel), :class => 'btn secondary'), profile_path
      .clearfix

      -#Accounts Section
      .section-header=t(:linked_accounts)
      = render :partial => "users/user_accounts"
      .clearfix

    #avatar-modal.modal.hide.fade
      = form_for :user, :url => user_path(@user['id']), :method => :put do |f|
        .modal-header
          = link_to "x", '#', :class => "close"
          %h3=t(:change_photo)
        .modal-body
          .row
            .span2
              %p
                = image_tag(@avatar, :class => "avatar_placeholder", :width => 100)
                .preview
                  =t(:preview)
            .span7
              %p=t(:change_photo_description)
              %p
                %a.btn.medium.facebook_avatar=t(:use_facebook_photo)
                - @user_auth['authentications'].each{|x| @facebook_uid = x['uid'] if x['provider'] == "facebook" }
                = f.hidden_field(:facebook_image, :value => "http://graph.facebook.com/#{@facebook_uid}/picture?type=large") if !@facebook_uid.blank?
                = f.hidden_field :avatar_url
              %p
                %a.btn.medium.upload_avatar=t(:upload_a_new_photo)
                .upload_field
                  = f.file_field :avatar, :onchange => "readURL(this);", :style=>"display:none;"
        .modal-footer
          = button_tag t(:save), :class => 'btn primary',  "data-loading-text" => "#{t(:saving_photo)}...", :id => "save-btn"

<!--[if IE]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

:javascript
  $(document).ready(function() {
    $('div.private').twipsy({html:true,placement:"above", title: function(){return "#{t(:private_field)}"} });
    $('div.public').twipsy({html:true,placement:"above", title: function(){return "#{t(:public_field)}"} });
    $("#new_password, #change_address, #update_user").validationEngine();
  });

  $(document).ready(function() {
    $('a.facebook_avatar').click(function() {
      facebook_image = $('input#user_facebook_image').val();
      $('input#user_avatar_url').val(facebook_image);
      $('.avatar_placeholder').attr('src', facebook_image).width(100);
      $('input#user_avatar').hide();
    });
    $('a.upload_avatar').click(function() {
      $('input#user_avatar').show();
      $('input#user_avatar_url').val("");
    });

    // var btn = $('#save-btn').click(function () {
    //   btn.button('loading');
    // })

  });

  function readURL(input) {
         if (input.files && input.files[0]) {
             var reader = new FileReader();
             reader.onload = function (e) {
                 $('.avatar_placeholder')
                     .attr('src', e.target.result)
                     .width(100)
             };
             reader.readAsDataURL(input.files[0]);
         }
  }
:css
  article, aside, figure, footer, header, hgroup, 
  menu, nav, section { display: block; }
